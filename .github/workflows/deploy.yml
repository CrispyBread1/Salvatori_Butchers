name: Build and Release

permissions:
  contents: write
  actions: write

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  SAGE_API_URL: ${{ secrets.SAGE_API_URL }}
  SAGE_API_TOKEN: ${{ secrets.SAGE_API_TOKEN }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_HOST: ${{ secrets.DB_HOST }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (e.g., v1.0.0)"
        required: true

jobs:
  cleanup-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const repo = context.repo;
            console.log(`Cleaning up artifacts for ${repo.owner}/${repo.repo}`);
            
            // Get list of all artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: repo.owner,
              repo: repo.repo
            });
            
            // Keep only the 5 most recent artifacts
            const artifactsToDelete = artifacts.data.artifacts.slice(5);
            
            // Delete old artifacts
            for (const artifact of artifactsToDelete) {
              console.log(`Deleting artifact ${artifact.name} (ID: ${artifact.id})`);
              await github.rest.actions.deleteArtifact({
                owner: repo.owner,
                repo: repo.repo,
                artifact_id: artifact.id
              });
            }

  build-macos:
    needs: cleanup-artifacts
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install PostgreSQL (Required for psycopg2)
        run: |
          brew update
          brew install postgresql
          echo "PATH=$(brew --prefix postgresql)/bin:$PATH" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyqt5
          pip install psycopg2-binary
          pip install requests
          pip install PyQtWebEngine
          pip install pyinstaller
          pip install python-dotenv
          pip install openpyxl
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Write .env file
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env
          echo "SAGE_API_URL=${{ secrets.SAGE_API_URL }}" >> .env
          echo "SAGE_API_TOKEN=${{ secrets.SAGE_API_TOKEN }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          # Verify the file exists
          ls -la .env

      - name: Create and verify macos.spec file
        run: |
          # Create the macos.spec file dynamically
          cat > macos.spec << 'EOL'
# -*- mode: python ; coding: utf-8 -*-
import os
from PyInstaller.utils.hooks import collect_submodules

env_file = os.path.join(os.getcwd(), '.env')
print(f"Packaging .env file from: {env_file}")
print(f"File exists: {os.path.exists(env_file)}")

hiddenimports = collect_submodules("psycopg2") + collect_submodules("gui") + collect_submodules("database") + collect_submodules("resources") + collect_submodules("dotenv") + collect_submodules("openpyxl")

datas = [(env_file, ".")]
# Add additional data files if they exist
if os.path.exists('assets'):
    datas.append(('assets', 'assets'))
if os.path.exists('templates'):
    datas.append(('templates', 'templates'))

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=datas,
    hiddenimports=hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)
pyz = PYZ(a.pure, a.zipped_data, cipher=None)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='ManageMeStock',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=True,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='ManageMeStock',
)

app = BUNDLE(
    coll,
    name='ManageMeStock.app',
    icon=None,
    bundle_identifier='com.managemestock.app',
    info_plist={
        'CFBundleShortVersionString': '1.0.0',
        'CFBundleVersion': '1.0.0',
        'NSHighResolutionCapable': 'True',
    },
)
EOL
          cat macos.spec
          
      - name: Build macOS app bundle
        run: |
          pyinstaller macos.spec

      - name: Verify app bundle creation
        run: |
          ls -la dist/
          if [ -d "dist/ManageMeStock.app" ]; then
            echo "App bundle created successfully!"
          else
            echo "App bundle creation failed! Checking directory contents:"
            ls -R dist/
            exit 1
          fi

      - name: Create DMG for macOS
        run: |
          # Install create-dmg
          brew install create-dmg
          
          # Create DMG from the app bundle
          create-dmg \
            --volname "ManageMeStock" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon "ManageMeStock.app" 175 190 \
            --hide-extension "ManageMeStock.app" \
            --app-drop-link 425 190 \
            "ManageMeStock-${{ github.event.inputs.version }}.dmg" \
            "dist/ManageMeStock.app" || echo "DMG creation failed, continuing with app bundle"

      - name: Package app for release
        run: |
          cd dist
          if [ -f "../ManageMeStock-${{ github.event.inputs.version }}.dmg" ]; then
            # DMG was created successfully
            mv "../ManageMeStock-${{ github.event.inputs.version }}.dmg" .
            echo "DMG package ready for release"
          else
            # Fall back to zip if DMG creation failed
            zip -r "ManageMeStock-Mac-${{ github.event.inputs.version }}.zip" ManageMeStock.app
            echo "ZIP package ready for release"
          fi
          ls -la

      - name: Create macOS Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/ManageMeStock-${{ github.event.inputs.version }}.dmg
            dist/ManageMeStock-Mac-${{ github.event.inputs.version }}.zip
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    needs: cleanup-artifacts
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyqt5
          pip install psycopg2-binary
          pip install requests
          pip install PyQtWebEngine
          pip install pyinstaller
          pip install python-dotenv
          pip install openpyxl
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Write .env file
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env
          echo "SAGE_API_URL=${{ secrets.SAGE_API_URL }}" >> .env
          echo "SAGE_API_TOKEN=${{ secrets.SAGE_API_TOKEN }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env

      - name: Build executable
        run: |
          pyinstaller windows.spec || (echo "windows.spec not found, using main.spec" && pyinstaller main.spec)

      - name: Verify executable creation
        run: |
          dir dist
          if (Test-Path dist\ManageMeStock.exe) {
            echo "Executable created successfully!"
          } elseif (Test-Path dist\ManageMeStock\ManageMeStock.exe) {
            echo "Executable created in subfolder!"
          } else {
            echo "Executable creation failed!"
            dir -Recurse dist
            exit 1
          }

      - name: Package Windows executable
        run: |
          cd dist
          if (Test-Path ManageMeStock.exe) {
            Compress-Archive -Path ManageMeStock.exe -DestinationPath "ManageMeStock-Win-${{ github.event.inputs.version }}.zip"
          } elseif (Test-Path ManageMeStock) {
            Compress-Archive -Path ManageMeStock -DestinationPath "ManageMeStock-Win-${{ github.event.inputs.version }}.zip"
          }

      - name: Create Windows Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/ManageMeStock-Win-${{ github.event.inputs.version }}.zip
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
